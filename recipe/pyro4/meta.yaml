package:
  name: pyro4
  version: "4.41"

source:
  fn: Pyro4-4.41.tar.gz
  url: https://pypi.python.org/packages/source/P/Pyro4/Pyro4-4.41.tar.gz
  md5: ed69e9bfafa9c06c049a87cb0c4c2b6c
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - pyro4 = pyro4:main
    #
    # Would create an entry point called pyro4 that calls pyro4.main()

    - pyro4-ns = Pyro4.naming:main
    - pyro4-nsc = Pyro4.nsc:main
    - pyro4-test-echoserver = Pyro4.test.echoserver:main
    - pyro4-check-config = Pyro4.configuration:configuration_dump
    - pyro4-flameserver = Pyro4.utils.flameserver:main
    - pyro4-httpgateway = Pyro4.utils.httpgateway:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - serpent >=1.11

  run:
    - python
    - serpent >=1.11

test:
  # Python imports
  imports:
    - Pyro4
    - Pyro4.socketserver
    - Pyro4.test
    - Pyro4.utils

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - pyro4-ns --help
    - pyro4-nsc --help
    - pyro4-test-echoserver --help
    - pyro4-check-config --help
    - pyro4-flameserver --help
    - pyro4-httpgateway --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://pythonhosted.org/Pyro4/
  license: MIT License
  summary: 'distributed object middleware for Python (RPC)'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
